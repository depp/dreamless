#!/usr/bin/env python3
# Copyright 2014 Dietrich Epp.
import os
import sys
os.chdir(os.path.dirname(os.path.realpath(__file__)))
AUTOGEN = '// This file is automatically generated.'

def die(why):
    print('error:', why, file=sys.stderr)
    sys.exit(1)

def scan(root):
    dirpath = os.path.join('data', root)
    sfx = {}
    for fname in os.listdir(dirpath):
        if fname.startswith('.') or not fname.endswith('.opus'):
            continue
        name = os.path.splitext(fname)[0]
        i = name.rfind('_')
        if i <= 0:
            die('invalid filename: {}'.format(fname))
        if not name[i+1:].isdigit():
            die('invalid filename: {}'.format(fname))
        gname = name[:i]
        try:
            group = sfx[gname]
        except KeyError:
            group = []
            sfx[gname] = group
        group.append(name)
    return sfx

def run():
    categories = [('sfx', 'Sfx')]
    allimages = [scan(c[0]) for c in categories]
    with open('src/game/audio_enum.hpp', 'w') as fp:
        print(AUTOGEN, file=fp)
        for (category, enum), sfx in zip(categories, allimages):
            print('static const int {}_COUNT = {};'
                  .format(category.upper(), len(sfx)), file=fp)
            print('enum class {} {{'.format(enum), file=fp)
            names = list(sorted(sfx.keys()))
            for name in names[:-1]:
                print('    {},'.format(name.upper()), file=fp)
            print('    {}'.format(names[-1].upper()), file=fp)
            print('};', file=fp)
    with open('src/game/audio_array.hpp', 'w') as fp:
        print(AUTOGEN, file=fp)
        fnames = []
        for (category, enum), sfx in zip(categories, allimages):
            items = []
            for name, vals in sorted(sfx.items()):
                items.append(
                    '{{ {}, {} }}'.format(len(fnames), len(vals)))
                fnames.extend(sorted(vals))
            print('const AudioInfo {0}_INFO[{0}_COUNT] = {{'
                  .format(category.upper()), file=fp)
            for line in items[:-1]:
                print(line + ',', file=fp)
            print(items[-1], file=fp)
            print('};', file=fp)
        maxlen = max(len(x) for x in fnames)
        print('static const int AUDIO_FILE_COUNT = {};'
              .format(len(fnames)), file=fp)
        print('static const int AUDIO_FILE_NAMELEN = {};'
              .format(maxlen), file=fp)
        print('const char AUDIO_FILE_NAMES[AUDIO_FILE_COUNT]'
              '[AUDIO_FILE_NAMELEN+1] = {',
              file=fp)
        for fname in fnames[:-1]:
            print('"{}",'.format(fname), file=fp)
        print('"{}"'.format(fnames[-1]), file=fp)
        print('};', file=fp)

run()
